bilet 10
task 1


lst = []
for i in range(10_000, 100_000):
    i = str(i)
    if i == i[::-1]:
        i = int(i)
        f = i ** 2
        f = str(f)
        if f == f[::-1]:
            lst.append(i)
print(sum(lst))


task 2
a = int(input())
b = int(input())
c = int(input())
if a + b > c and a + c > b and b + c > a:
    P = a + b + c
    S = (P / 2 * (P / a) * (P / b) * (P / c)) ** 0.5
    h1 = (2 * S) / a
    h2 = (2 * S) / b
    h3 = (2 * S) / c
    print("Perimeter:", P, "\n" "Area:", S, "\n" "Heights:", h1, h2, h3)
else:
    print("This triangle cant't be formed!")


task 3


#https://www.eolymp.com/uk/submissions/15461664
s = input()
n = 0
a = '*/-+%'
if '**' in s:
    n += s.count('**')
if '//' in s:
    n += s.count('//')
s = s.replace('**', '')
s = s.replace('//', '')
for ch in a:
    for i in s:
        if i == ch:
            n += 1
print(n)


task4


module

def scalar(lst1, lst2):
    if len(lst1) == len(lst2):
        summ = 0
        for el in lst1:
            for i in lst2:
                dob = lst1[el] * lst2[i]
                summ += dob
        return summ
    else:
        return ImportError


def rows(matrix):
    while True:
        for row in matrix:
            for i in range(len(matrix)):
                rowscalar = scalar(row, row[i])
                if rowscalar == 0:
                    return True
                else:
                    return False


def cols(matrix):
    n = len(matrix)
    m = len(matrix[0])
    while True:
        for j in range(m):
            for i in range(n):
                col = scalar(matrix[i][j], matrix[i][j])
                if col == 1:
                    return True
                else:
                    return False


def isortonormo(matrix):
    if len(matrix) == len(matrix[0]):
        if rows(matrix) is True and cols(matrix) is True:
            return "Matrix is ortonormous"
        else:
            return "Matrix is not ortonormous"
    else:
        return ImportError


task

from moduler import isortonormo
with open("file.txt", "r") as f:
    matrix1 = []
    for line in f:
        lst = ''.join(line)
        matrix1.append(lst)

print(isortonormo(matrix1))
